The first step in any problem is defining your problem.
I use a simple framework when defining a new problem to address with machine learning.
The framework involves answering three questions to varying degrees of thoroughness:
  Step 1:What is the problem?
  Step 2:Why does the problem need to be solved?
  Step 3:How would I solve the problem?

Step 1:What is the problem?
  The first step is defining the problem. I user a number of tactics to collect this information.
  Informal description
    Describe the problem as though you were describing it to a friend or colleague.This can provide a great starting point for highlighting areas that you might need to fill. This can provide a great starting point for highlighting areas that you might need to fill. It also provides the basis for a one sentence description you can user to share your understanding of the problem.
    A computer program is said to learn from experience E with respect to some class of tasks T and performance measure P, if its performance at tasks in T, as measured by P, improves with experience E.
    Use this formalism to define the T, P, and E for your problem.
  Assumptions 
    Create a list of assumptions about the problem and it's phrasing. These may be rules of thumb and domain specific information that you think will get you to a viable solution faster.
    It can be useful to highlight questions that can be tested against real data becauser breakthroughs and innovation occur when assumptions and best practioce are demonstrated to vbe wrong in the face of real data. It can also be useful to highlight areas of the problem specification that may need to be challenged relaxed or tightened.
  
Step 2:Why does the problem need to be solved?
  The second step is to think deeply about why you want or need the problem solved.
  Motivation
    Consider your motivation for solving the problem. What need will be fulfilled when the problem is solved?
    For example, you may be solving the problem as a learning exervise. This is useful to clarify as you can decide that you don't want to use the most suitable method to solve the problem, but instead you want to explore methods that you are not familiar with in order to learn new skills.
    Alternatively, you may need to solve the ptoblem as part of a duty at work, ultimately to keep your job.
  Solution Benefits
    Consider the benefits of haveing the problem solved. What capabilities does it enable?
    It is important to be clear on the benefits of the problem being solved to ensure that you capitalize on them. These benefits can be used to sell the project to colleagues and management to get buy in and additional time or budget resources.
    If it benefits you personally, then be clear on what those benefits are and how you will know when you have got them. For example, if it's a tool or utility, then what will you be able to do with that utility that you can't do now and why is that meaningful to you?
  Solution Use
    Consider how the solution to the problem will be used and what type of lifetime you expect the solution to have. As programmers we often think the work is done as soon as the program is written, but really the project is just beginning it's maintance lifetime.
    The way the solution will be used will influence the nature and requirements of the solution you adopt.
    Consider whether you are looking to write a report to present results or you want to operationalize the solution. If you want to operationalize the solution, consider the functional and nonfunctional requirements you have for a solution, just like a software project.
Step 3:How would I solve the problem?
  In this third and final step of the problem definition, explore how you would solve the problem manually.
  List out step-by-step what data you would collect, how you would prepare it and how you would design a program to solve the problem. This may include prototypes and experiments you would need to perform which are a gold mine because they will highlight questions and uncertainties you have aobut the domain that could be explored.
  This is a power tool. It can highlight problems that actually can be solved satisfactorily using a manully implemented solution. It also flushed out important domain knowledge that has been trapped up until now like where the data is actually stored, what types of features would be useful and many other details.
  Collect all of these details as they occur to you and update the previous sections of the problem definition. Especially the assumptions and rules of the thumb.
  We have considered a manually specified solution before when describing complex problems in why machine learning matters.  
    
